<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MyServiceLibrary</name>
    </assembly>
    <members>
        <member name="T:MyServiceLibrary.CustomExceptions.AccesPermissionException">
            <summary>
            Custom exception. Thrown when try to add or delete user in slave service.
            </summary>
        </member>
        <member name="M:MyServiceLibrary.CustomExceptions.AccesPermissionException.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:MyServiceLibrary.CustomExceptions.AccesPermissionException.#ctor(System.String)">
            <summary>
            Constructor with exception message
            </summary>
            <param name="message">Exception message</param>
        </member>
        <member name="M:MyServiceLibrary.CustomExceptions.AccesPermissionException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor with exception message and inner exception
            </summary>
            <param name="message">Exception message</param>
            <param name="inner">Inner exception</param>
        </member>
        <member name="T:MyServiceLibrary.ExistUserException">
            <summary>
            Custom exception. Thrown when try to add user that have already added 
            </summary>
        </member>
        <member name="M:MyServiceLibrary.ExistUserException.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:MyServiceLibrary.ExistUserException.#ctor(System.String)">
            <summary>
            Constructor with exception message
            </summary>
            <param name="message">Exception message</param>
        </member>
        <member name="M:MyServiceLibrary.ExistUserException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor with exception message and inner exception
            </summary>
            <param name="message">Exception message</param>
            <param name="inner">Inner exception</param>
        </member>
        <member name="T:MyServiceLibrary.DefaultUserException">
            <summary>
            Custom exception. Thrown when try to add user with default fields.
            </summary>
        </member>
        <member name="M:MyServiceLibrary.DefaultUserException.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:MyServiceLibrary.DefaultUserException.#ctor(System.String)">
            <summary>
            Constructor with exception message
            </summary>
            <param name="message">Exception message</param>
        </member>
        <member name="M:MyServiceLibrary.DefaultUserException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor with exception message and inner exception
            </summary>
            <param name="message">Exception message</param>
            <param name="inner">Inner exception</param>
        </member>
        <member name="T:MyServiceLibrary.EventArguments.AddItemEventArgs`1">
            <summary>
            Arguments of add item event
            </summary>
        </member>
        <member name="M:MyServiceLibrary.EventArguments.AddItemEventArgs`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Constructor with entering items to add
            </summary>
            <param name="itemsToAdd">items to add </param>
        </member>
        <member name="P:MyServiceLibrary.EventArguments.AddItemEventArgs`1.ItemsToAdd">
            <summary>
            Property of item to add 
            </summary>
        </member>
        <member name="T:MyServiceLibrary.EventArguments.DeleteItemEventArgs`1">
            <summary>
            Arguments of delete item event
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:MyServiceLibrary.EventArguments.DeleteItemEventArgs`1.#ctor(System.Predicate{`0})">
            <summary>
            Constructor with entering predicate for deleting
            </summary>
            <param name="predicate">predicate for deleting</param>
        </member>
        <member name="P:MyServiceLibrary.EventArguments.DeleteItemEventArgs`1.Predicate">
            <summary>
            Property of predicate for deleting
            </summary>
        </member>
        <member name="T:MyServiceLibrary.Helpers.CheckDefaultValueAttribute">
            <summary>
            Property has attribute when it should be checked on default value
            </summary>
        </member>
        <member name="T:MyServiceLibrary.Helpers.CheckDefaultValues">
            <summary>
            Class checks all properties of item on default value
            </summary>
        </member>
        <member name="M:MyServiceLibrary.Helpers.CheckDefaultValues.Check``1(``0)">
            <summary>
            Mehod checks all properties of item on default value
            </summary>
            <typeparam name="T">Type of item</typeparam>
            <param name="item">Item to check</param>
            <returns>True if item have one or more property with default value</returns>
        </member>
        <member name="T:MyServiceLibrary.Implementation.ServiceRoles">
            <summary>
            Enumeration of services roles
            </summary>
        </member>
        <member name="F:MyServiceLibrary.Implementation.ServiceRoles.Master">
            <summary>
            Role master
            </summary>
        </member>
        <member name="F:MyServiceLibrary.Implementation.ServiceRoles.Slave">
            <summary>
            Role slave
            </summary>
        </member>
        <member name="T:MyServiceLibrary.Implementation.XmlSerializeProvider`1">
            <summary>
            Class provides xml serializer
            </summary>
            <typeparam name="T">type of object to serialize</typeparam>
        </member>
        <member name="M:MyServiceLibrary.Implementation.XmlSerializeProvider`1.Serialize(System.String,`0)">
            <summary>
            Method serializes obj to the file
            </summary>
            <param name="fileName">File name</param>
            <param name="obj">Object to serialize</param>
        </member>
        <member name="M:MyServiceLibrary.Implementation.XmlSerializeProvider`1.Deserialize(System.String,System.Type[])">
            <summary>
            Method deserializes obj from the file
            </summary>
            <param name="fileName">File name</param>
            <param name="extraTypes">Extra types</param>
        </member>
        <member name="T:MyServiceLibrary.Implementation.ServiceServer`1">
            <summary>
            Server of user service
            </summary>
        </member>
        <member name="M:MyServiceLibrary.Implementation.ServiceServer`1.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:MyServiceLibrary.Implementation.ServiceServer`1.#ctor(System.Func{System.Int32})">
            <summary>
            Constructor with entering\ id generator
            </summary>
            <param name="idGenerator">Identifier generator</param>
        </member>
        <member name="M:MyServiceLibrary.Implementation.ServiceServer`1.#ctor(System.Func{System.Int32},MyServiceLibrary.Interfaces.ISerializerProvider{MyServiceLibrary.Implementation.User[]})">
            <summary>
            Constructor with entering serializer and id generator
            </summary>
            <param name="idGenerator">Identifier generator</param>
            <param name="serializerProvider">Serialization provider</param>
        </member>
        <member name="M:MyServiceLibrary.Implementation.ServiceServer`1.#ctor(MyServiceLibrary.Interfaces.ISerializerProvider{MyServiceLibrary.Implementation.User[]})">
            <summary>
            Constructor with entering serializer
            </summary>
            <param name="serializerProvider">Serialization provider</param>
        </member>
        <member name="P:MyServiceLibrary.Implementation.ServiceServer`1.Master">
            <summary>
            Property returns all slaves
            </summary>
        </member>
        <member name="P:MyServiceLibrary.Implementation.ServiceServer`1.Slaves">
            <summary>
            Property returns master entity
            </summary>
        </member>
        <member name="M:MyServiceLibrary.Implementation.ServiceServer`1.Dispose">
            <summary>
            Method unload all domains
            </summary>
        </member>
        <member name="M:MyServiceLibrary.Implementation.ServiceServer`1.Dispose(System.Boolean)">
            <summary>
            Method unload all domins and suppress finalize 
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:MyServiceLibrary.Implementation.ServiceServer`1.Finalize">
            <summary>
            Finilazire for server
            </summary>
        </member>
        <member name="T:MyServiceLibrary.Implementation.UserService">
            <summary>
            Users service
            </summary>
        </member>
        <member name="M:MyServiceLibrary.Implementation.UserService.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:MyServiceLibrary.Implementation.UserService.#ctor(System.Func{System.Int32},MyServiceLibrary.Implementation.ServiceRoles)">
            <summary>
            Constructor with entering of identifier generator and service role
            </summary>
            <param name="idGenerator">Identifier generator</param>
            <param name="role">Service role</param>
        </member>
        <member name="M:MyServiceLibrary.Implementation.UserService.#ctor(MyServiceLibrary.Implementation.ServiceRoles)">
            <summary>
            Constructor with entering of service role
            </summary>
            <param name="role">Service role</param>
        </member>
        <member name="M:MyServiceLibrary.Implementation.UserService.#ctor(MyServiceLibrary.Implementation.UserService)">
            <summary>
            Constructor with entering master service
            </summary>
            <param name="master">Master service</param>
        </member>
        <member name="E:MyServiceLibrary.Implementation.UserService.AddUser">
            <summary>
            Add user event
            </summary>
        </member>
        <member name="E:MyServiceLibrary.Implementation.UserService.DeleteUser">
            <summary>
            Delete user event
            </summary>
        </member>
        <member name="P:MyServiceLibrary.Implementation.UserService.IdGenerator">
            <summary>
            Generator of user id
            </summary>
        </member>
        <member name="P:MyServiceLibrary.Implementation.UserService.Role">
            <summary>
            Property of service roles
            </summary>
        </member>
        <member name="M:MyServiceLibrary.Implementation.UserService.Add(System.Collections.Generic.IEnumerable{MyServiceLibrary.Implementation.User})">
            <summary>
            Method insert users into set
            </summary>
            <param name="users">Users to add</param>
        </member>
        <member name="M:MyServiceLibrary.Implementation.UserService.Add(MyServiceLibrary.Implementation.User)">
            <summary>
            Method insert user into set
            </summary>
            <param name="user">User to add</param>
        </member>
        <member name="M:MyServiceLibrary.Implementation.UserService.Delete(System.Predicate{MyServiceLibrary.Implementation.User})">
            <summary>
            Method remove all user which matches the predicate.  
            </summary>
            <param name="predicate">Predicate</param>
        </member>
        <member name="M:MyServiceLibrary.Implementation.UserService.SearchDeferred(System.Func{MyServiceLibrary.Implementation.User,System.Boolean})">
            <summary>
            Method deferred returns users which matches the predicate
            </summary>
            <param name="predicate">Predicate</param>
            <returns>Users which matches the predicate</returns>
        </member>
        <member name="M:MyServiceLibrary.Implementation.UserService.Search(System.Func{MyServiceLibrary.Implementation.User,System.Boolean})">
            <summary>
            Method returns users which matches the predicate
            </summary>
            <param name="predicate">Predicate</param>
            <returns>Users which matches the predicate</returns>
        </member>
        <member name="M:MyServiceLibrary.Implementation.UserService.SerializeState(MyServiceLibrary.Interfaces.ISerializerProvider{MyServiceLibrary.Implementation.User[]})">
            <summary>
            Method serialize actual state using current serializer
            </summary>
            <param name="serializer"></param>
        </member>
        <member name="M:MyServiceLibrary.Implementation.UserService.OnAddUser(MyServiceLibrary.EventArguments.AddItemEventArgs{MyServiceLibrary.Implementation.User})">
            <summary>
            Method is called when new user was added
            </summary>
            <param name="e">Event args</param>
        </member>
        <member name="M:MyServiceLibrary.Implementation.UserService.OnDeleteUser(MyServiceLibrary.EventArguments.DeleteItemEventArgs{MyServiceLibrary.Implementation.User})">
            <summary>
            Method is called when new user was removed
            </summary>
            <param name="e">Event args</param>
        </member>
        <member name="M:MyServiceLibrary.Implementation.UserService.AddItems(System.Object,MyServiceLibrary.EventArguments.AddItemEventArgs{MyServiceLibrary.Implementation.User})">
            <summary>
            Method is called when master adds users
            </summary>
            <param name="sender">Master</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:MyServiceLibrary.Implementation.UserService.DeleteItems(System.Object,MyServiceLibrary.EventArguments.DeleteItemEventArgs{MyServiceLibrary.Implementation.User})">
            <summary>
            Method is called when master deletes users
            </summary>
            <param name="sender">Master</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="T:MyServiceLibrary.Implementation.User">
            <summary>
            User entity
            </summary>
        </member>
        <member name="P:MyServiceLibrary.Implementation.User.Id">
            <summary>
            User's identifier
            </summary>
        </member>
        <member name="P:MyServiceLibrary.Implementation.User.FirstName">
            <summary>
            User's first name
            </summary>
        </member>
        <member name="P:MyServiceLibrary.Implementation.User.LastName">
            <summary>
            User's last name
            </summary>
        </member>
        <member name="P:MyServiceLibrary.Implementation.User.DateOfBirth">
            <summary>
            User's date of birth
            </summary>
        </member>
        <member name="M:MyServiceLibrary.Implementation.User.op_Equality(MyServiceLibrary.Implementation.User,MyServiceLibrary.Implementation.User)">
            <summary>
            Operator compares users by value
            </summary>
            <param name="a">User a</param>
            <param name="b">User b</param>
            <returns>True if users are equal</returns>
        </member>
        <member name="M:MyServiceLibrary.Implementation.User.op_Inequality(MyServiceLibrary.Implementation.User,MyServiceLibrary.Implementation.User)">
            <summary>
            Operator compares users by value
            </summary>
            <param name="x">User a</param>
            <param name="y">User b</param>
            <returns>True if users aren't equal</returns>
        </member>
        <member name="M:MyServiceLibrary.Implementation.User.Equals(System.Object)">
            <summary>
            Method compares this and entered user by value
            </summary>
            <param name="obj">second user</param>
            <returns>True if users are equal</returns>
        </member>
        <member name="M:MyServiceLibrary.Implementation.User.GetHashCode">
            <summary>
            Method returns unique hash number for current user
            </summary>
            <returns>Hash number</returns>
        </member>
        <member name="M:MyServiceLibrary.Implementation.User.ToString">
            <summary>
            Methods convert user to string and returns it
            </summary>
            <returns>result string</returns>
        </member>
        <member name="T:MyServiceLibrary.Interfaces.ISerializerProvider`1">
            <summary>
            Interface provide function of serializer
            </summary>
        </member>
        <member name="M:MyServiceLibrary.Interfaces.ISerializerProvider`1.Serialize(System.String,`0)">
            <summary>
            Methods serialize object in the file
            </summary>
            <param name="fileName">Object will be serialize in this file</param>
            <param name="obj">Object to serialize</param>
        </member>
        <member name="M:MyServiceLibrary.Interfaces.ISerializerProvider`1.Deserialize(System.String,System.Type[])">
            <summary>
            Methods deserialize object from the file
            </summary>
            <param name="fileName">Object will be serialize in this file</param>
            <param name="extraTypes">Extra Types</param>
        </member>
        <member name="T:MyServiceLibrary.Interfaces.IService`1">
            <summary>
            Generic interface. It provides functions of service.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:MyServiceLibrary.Interfaces.IService`1.Role">
            <summary>
            Property of service roles
            </summary>
        </member>
        <member name="M:MyServiceLibrary.Interfaces.IService`1.Add(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Method adds set of some items to service.
            </summary>
            <param name="items">Set of some items</param>
        </member>
        <member name="M:MyServiceLibrary.Interfaces.IService`1.Add(`0)">
            <summary>
            Method adds some item to service.
            </summary>
            <param name="item">Item</param>
        </member>
        <member name="M:MyServiceLibrary.Interfaces.IService`1.Delete(System.Predicate{`0})">
            <summary>
            Method removes items which matches the predicate. 
            </summary>
            <param name="predicate">Predicate</param>
        </member>
        <member name="M:MyServiceLibrary.Interfaces.IService`1.SearchDeferred(System.Func{`0,System.Boolean})">
            <summary>
            Method deferred returns items which matches the predicate
            </summary>
            <param name="predicate">Predicate</param>
            <returns>Items which matches the predicate</returns>
        </member>
        <member name="M:MyServiceLibrary.Interfaces.IService`1.Search(System.Func{`0,System.Boolean})">
            <summary>
            Method returns items which matches the predicate
            </summary>
            <param name="predicate">Predicate</param>
            <returns>Items which matches the predicate</returns>
        </member>
        <member name="M:MyServiceLibrary.Interfaces.IService`1.SerializeState(MyServiceLibrary.Interfaces.ISerializerProvider{`0[]})">
            <summary>
            Method serialize actual state using current serializer
            </summary>
            <param name="serializer"></param>
        </member>
        <member name="T:MyServiceLibrary.Interfaces.IServiceServer`1">
            <summary>
            Interface provide function of server 
            </summary>
        </member>
        <member name="P:MyServiceLibrary.Interfaces.IServiceServer`1.Slaves">
            <summary>
            Property returns all slaves
            </summary>
        </member>
        <member name="P:MyServiceLibrary.Interfaces.IServiceServer`1.Master">
            <summary>
            Property returns master entity
            </summary>
        </member>
    </members>
</doc>
